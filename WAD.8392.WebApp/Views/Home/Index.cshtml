@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center" ng-app="MusicInstrumentsSpa">
    <div ng-view>

    </div>

</div>

@section Scripts {

   
    <script type="text/javascript">
        @*var app = angular.module('MusicInstrumentsSpa', ['ngRoute', 'ngStorage']);
        app.config(function ($routeProvider) {
            $routeProvider
                .when('/', {
                    templateUrl: 'pages/index.html',
                    controller: 'ProductListController'
                })
                .when('/Users', {
                    templateUrl: 'pages/users.html',
                    controller: 'UsersController'
                })
                .when('/SignUp', {
                    templateUrl: 'pages/save_user.html',
                    controller: 'RegisterController'
                })
                .when('/SignIn', {
                    templateUrl: 'pages/login.html',
                    controller: 'LoginController'
                })
                .when('/AddProduct', {
                    templateUrl: 'pages/save_product.html',
                    controller: 'AddProductController'
                })
                .when('/EditProduct/:ProductId', {
                    templateUrl: 'pages/save_product.html',
                    controller: 'EditProductController'
                })
                .when('/MyProducts', {
                    templateUrl: 'pages/my_products.html',
                    controller: 'MyProductsController'
                })
                .when('/MyAccount', {
                    templateUrl: 'pages/account.html',
                    controller: 'AccountController'
                })
                .when('/EditAccount', {
                    templateUrl: 'pages/save_user.html',
                    controller: 'EditAccountController'
                })
                .when('/UserDetails/:UserId', {
                    templateUrl: 'pages/user_details.html',
                    controller: 'UserDetailsController'
                })
                .when('/ProductDetails/:ProductId', {
                    templateUrl: 'pages/product_details.html',
                    controller: 'ProductDetailsController'
                })
                .otherwise({
                    redirectTo: '/'
                })
        });
        app.service('AuthenticationCheck', ['$http',function ($http) {
            var service = {};
            service.IsLogged = function (callback) {
                if (sessionStorage.getItem('current_user')) {
                    if (!$http.defaults.headers.common.Authorization) {
                        $http.defaults.headers.common.Authorization = 'Bearer ' + sessionStorage.getItem('token');
                    }
                     callback(true);
                } else {
                     callback(false);
                }
            }
            return service;
        }]);
        app.service('AuthenticationService', ['$http', 'AuthenticationCheck', function ($http, AuthenticationCheck) {
            var service = {};
            service.Login = function (login, callback) {
                AuthenticationCheck.IsLogged(function (result) {
                    if (result) {
                        callback(false);
                    } else {
                        $http.post("@Url.Action("Authenticate", "Authenticate")", login).then(
                            function (response) {
                                sessionStorage.setItem('token', response.data);
                                $http.defaults.headers.common.Authorization = 'Bearer ' + response.data;
                                $http.get("@Url.Action("GetLoggedUser", "Users")").then(function (response) {
                                    sessionStorage.setItem('current_user', JSON.stringify(response.data));
                                    callback(true);
                                })
                            },
                            function (error) {
                                callback(false);
                            })
                    }
                })
            }
            service.Logout = function () {
                sessionStorage.clear();
                $http.defaults.headers.common.Authorization = '';
            }
            return service;
        }])
        app.service('DateConversion', [function () {
            var service = {};
            service.ConvertDate = function (date) {
                var date = new Date(date);
                var year = date.getFullYear();
                var month = date.getMonth();
                var day = date.getDate();
                 return  `${day}/${month + 1}/${year}`;
            }
            return service;
        }])
        app.controller('ProductListController', ['$scope', '$http','DateConversion' , function ($scope, $http, DateConversion) {
            $scope.products = [];
            $scope.subcategories = [];
            $scope.categories = [];
            $scope.filterParams = {
                manufacturer: null,
                subcategory: null,
                category: null
            }

            $scope.manufactuers = [];
            $http.get(`@Url.Action("GetManufacturers", "Manufacturers")`).then(function (response) {
            $scope.manufacturers = response.data;
            })
             $http.get(`@Url.Action("GetProductCategories", "ProductCategories")`).then(function (response) {
             $scope.categories = response.data;
             })
            $scope.GetProducts = function () {

                $http.get(`@Url.Action("GetProductSubcategories", "ProductSubcategories")?${$scope.filterParams.category == null ? '' : `&category=${$scope.filterParams.category}`}`).then(function (response) {
                    $scope.subcategories = response.data;
                })

                var queryString = $scope.filterParams.manufacturer == null ? '' : `manufacturer=${$scope.filterParams.manufacturer}`;
                $scope.filterParams.category == null ? queryString += '' : queryString += `&category=${$scope.filterParams.category}`;
                $scope.filterParams.subcategory == null ? queryString += '' : queryString += `&subcategory=${$scope.filterParams.subcategory}`;
                $http.get(`@Url.Action("GetProducts", "Products")?status=0&${queryString}`).then(function (response) {
                    $scope.products = response.data;
                    $scope.products.forEach(function (product) {
                        product.datePublished = DateConversion.ConvertDate(product.datePublished);
                    })
             })
            }
            $scope.GetProducts();
            $scope.GetProductsFromCategory = function () {
                $scope.filterParams.subcategory = null;
                $scope.GetProducts();
            }
            $scope.Clear = function () {
                $scope.filterParams = {
                    manufacturer: null,
                    subcategory: null,
                    category: null
                }
                $scope.GetProducts();
            }
        }]);
        app.controller('UsersController', ['$scope', '$http','DateConversion',function ($scope, $http, DateConversion) {
            $scope.users = [];
            $http.get("@Url.Action("GetUsers", "Users")").then(function (response) {
                $scope.users = response.data;
                $scope.users.forEach(function (user) {
                    user.dateOfBirth = DateConversion.ConvertDate(user.dateOfBirth);
                })
            })
        }]);
        app.controller('RegisterController', ['$scope', '$http', '$location', 'AuthenticationService', 'AuthenticationCheck', function ($scope, $http, $location, AuthenticationService, AuthenticationCheck) {
            $scope.user = {
                id: 0,
                firstName: '',
                lastName: '',
                phoneNumber: null,
                dateOfBirth: null,
                email: null,
                userName: '',
                password: ''
            }
            $scope.mode = "Register";
            $scope.DisplayForm = true;
            $scope.info = "";
            $scope.message = "";
            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.info = "You are already registered";
                    $scope.DisplayForm = false;
                }
            })
            $scope.Save = function () {
                $http.post("@Url.Action("PostUser", "Users")", $scope.user).then(function (response) {
                    $scope.login = {
                        userName: $scope.user.userName,
                        password: $scope.user.password
                    }
                    AuthenticationService.Login($scope.login, function (result) {
                        if (result) {
                            $location.path('/MyAccount');
                        } else {
                            $scope.message = "Something went wrong";
                        }
                    })
                }, function (error) {
                        $scope.message = error.data;
                });
            }
        }])
        app.controller('LoginController', ['$scope', '$location', 'AuthenticationService', "AuthenticationCheck", function ($scope, $location, AuthenticationService, AuthenticationCheck) {
            $scope.login = {
                userName: null,
                password: null
            };
            $scope.message = "";
            $scope.IsLogged = false;
            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.IsLogged = true;
                }
            })
            $scope.SignIn = function () {
                AuthenticationService.Login($scope.login, function (result) {
                    if (result) {
                        $location.path('/MyAccount');
                    } else {
                        $scope.message = "Login failed";
                    }
                })
            }
        }]);
        app.controller('AddProductController', ['$http', '$scope', '$location', 'AuthenticationCheck', function ($http, $scope, $location, AuthenticationCheck) {
            $scope.message = "";
            $scope.IsLogged = false;
            $scope.editMode = false;
            $scope.manufacturers = [];
            $scope.productSubcategories = [];
            $scope.conditions = [
                {
                    condValue: 0,
                    condName: 'New'
                },
                {
                    condValue: 1,
                    condName: 'Medium'
                },
                {
                    condValue: 2,
                    condName: 'Old'
                }
            ]
            $scope.statuses = [
                {
                    statusValue: 0,
                    statusName: 'Available'
                },
                {
                    statusValue: 1,
                    statusName: 'Booked'
                },
                {
                    statusValue: 2,
                    statusName: 'Sold'
                }
            ]
            $http.get("@Url.Action("GetManufacturers","Manufacturers")").then(function (response) {
                $scope.manufacturers = response.data;
            })
             $http.get("@Url.Action("GetProductSubcategories", "ProductSubcategories")").then(function (response) {
                 $scope.productSubcategories = response.data;
             })
            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.IsLogged = true;
                }
            })
            $scope.onChange = function (item, context) {
                $scope.product[context] = item
            }
            $scope.product = {
                productName: null,
                productDescription: null,
                price: null,
                location: null,
                manufacturerId: null,
                condition: null,
                productSubcategoryId: null
            };
            $scope.Save = function () {
                $http.post("@Url.Action("PostProduct", "Products")", $scope.product).then(function (response) {
                    $location.path('/MyProducts');
                }, function (error) {
                        $scope.message = error.data.title;
                })
            }
        }])
        app.controller('MyProductsController', ['$scope', '$http', 'AuthenticationCheck', 'DateConversion',function ($scope, $http, AuthenticationCheck, DateConversion) {
            $scope.message = "";
            $scope.products = [];
            $scope.IsLogged = false;
            $scope.deleted = false;
            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.IsLogged = true;
                    $scope.CurrentUser = JSON.parse(sessionStorage.getItem('current_user'));
                    $http.get(`@Url.Action("GetProducts", "Products")?user=${$scope.CurrentUser.userId}`).then(function (response) {
                        $scope.products = response.data;
                        $scope.products.forEach(product => {
                            product.datePublished = DateConversion.ConvertDate(product.datePublished);
                        })
                    })
                } else {
                    $scope.message = "Sign in to see your products";
                }
            })
              $scope.Delete = function (product) {
                  $http.delete(`@Url.Action("GetProducts", "Products")/${product.productId}`).then(function (response) {
                      $scope.deleted = true;
                      var index = $scope.products.indexOf(product);
                      $scope.products.splice(index, 1);
                })
            }
        }])
        app.controller('AccountController', ['$scope', '$http', '$location', 'AuthenticationCheck', 'AuthenticationService', 'DateConversion', function ($scope, $http, $location, AuthenticationCheck, AuthenticationService, DateConversion) {
            $scope.message = "";
            $scope.user = null;
            $scope.IsLogged = false;
            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.user = JSON.parse(sessionStorage.getItem('current_user'));
                    $scope.user.dateOfBirth = DateConversion.ConvertDate($scope.user.dateOfBirth);
                    $scope.IsLogged = true;
                } else {
                    $scope.message = "Sign in to see your account details";
                }
            });
                $scope.Delete = function () {
                $http.delete(`@Url.Action("GetUsers", "Users")/${$scope.user.userId}`, $scope.user.userId).then(function (response) {
                    AuthenticationService.Logout();
                    $scope.user = null;
                    $scope.message = "Account is deleted";
                    $scope.IsLogged = false;
                })
            }
            $scope.SignOut = function () {
                AuthenticationService.Logout();
                $location.path('/');
            }
        }])
        app.controller('EditAccountController', ['$scope', '$http', '$location', 'AuthenticationCheck', function ($scope, $http, $location, AuthenticationCheck) {
            $scope.user = null;
            $scope.DisplayForm = false;
            $scope.message = "";
            $scope.info = "";
            $scope.mode = "Modify";
            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.user = JSON.parse(sessionStorage.getItem('current_user'));
                    $scope.user.dateOfBirth = new Date($scope.user.dateOfBirth);
                    $scope.DisplayForm = true;
                } else {
                    $scope.info = "To edit account you should sign in first";
                }
            })
            $scope.Save = function () {
                $http.put(`@Url.Action("GetUsers", "Users")/${$scope.user.userId}`, $scope.user).then(function (response) {
                    sessionStorage.setItem('current_user', JSON.stringify($scope.user));
                    $location.path('/MyAccount');
                },
                    function (error) {
                        $scope.message = error.data.title;
                    }
                )
            }
        }])
        app.controller('UserDetailsController', ['$scope', '$http','$routeParams', 'DateConversion',function ($scope, $http, $routeParams, DateConversion) {
            $scope.user = null;
            $scope.products = [];
            $scope.message = "";
            $http.get(`@Url.Action("GetUsers", "Users")/${$routeParams.UserId}`).then(function (response) {
                $scope.user = response.data;
                $scope.user.dateOfBirth = DateConversion.ConvertDate($scope.user.dateOfBirth);
                $http.get(`@Url.Action("GetProducts", "Products")?user=${$scope.user.userId}`).then(function (response) {
                    $scope.products = response.data;
                    $scope.products.forEach(product => {
                        product.datePublished = DateConversion.ConvertDate(product.datePublished);
                    })
                })
            },
            function (error) {
                $scope.message = error.data.title;
            })
        }])
        app.controller('EditProductController', ['$scope', '$http', '$routeParams', '$location', 'AuthenticationCheck', function ($scope, $http, $routeParams, $location, AuthenticationCheck) {
            $scope.product = null;
            $scope.message = "";
            $scope.IsLogged = false;
            $scope.editMode = true;
            $scope.manufacturers = [];
            $scope.productSubcategories = [];

            AuthenticationCheck.IsLogged(function (result) {
                if (result) {
                    $scope.IsLogged = true;
                    $http.get(`@Url.Action("GetProducts", "Products")/${$routeParams.ProductId}`).then(function (response) {
                        $scope.product = response.data;
                        $scope.selectedCondition = $scope.conditions.find(c => c.condName == $scope.product.condition)
                        $scope.selectedStatus = $scope.statuses.find(s => s.statusName == $scope.product.status)
                        $http.get("@Url.Action("GetManufacturers","Manufacturers")").then(function (response) {
                            $scope.manufacturers = response.data;
                            $scope.manufacturerSelected = $scope.manufacturers.find(m => m.manufacturerId == $scope.product.manufacturerId);
                        });

                        $http.get("@Url.Action("GetProductSubcategories", "ProductSubcategories")").then(function (response) {
                            $scope.productSubcategories = response.data;
                            $scope.categorySelected = $scope.productSubcategories.find(s => s.productSubcategoryId == $scope.product.productSubcategoryId);
                        });
                    })
                }
            })


            $scope.conditions = [
                {
                    condValue: 0,
                    condName: 'New'
                },
                {
                    condValue: 1,
                    condName: 'Medium'
                },
                {
                    condValue: 2,
                    condName: 'Old'
                }
            ]


            $scope.statuses = [
                {
                    statusValue: 0,
                    statusName: 'Available'
                },
                {
                    statusValue: 1,
                    statusName: 'Booked'
                },
                {
                    statusValue: 2,
                    statusName: 'Sold'
                }
            ]


            $scope.onChange = function (item, context) {
                $scope.product[context] = item
            }
            $scope.Save = function () {
                $http.put(`@Url.Action("GetProducts", "Products")/${$routeParams.ProductId}`, $scope.product).then(function (response) {

                    $location.path('/MyProducts');
                },
                    function (error) {
                        $scope.message = error.data.title;
                    }
                )
            }
        }])
           app.controller('ProductDetailsController', ['$scope', '$http','$routeParams','DateConversion', function ($scope, $http, $routeParams, DateConversion) {
            $scope.product = null;
            $scope.message = "";
            $http.get(`@Url.Action("GetProducts", "Products")/${$routeParams.ProductId}`).then(function (response) {
                $scope.product = response.data;
                $scope.product.datePublished = DateConversion.ConvertDate($scope.product.datePublished);
            },
            function (error) {
                $scope.message = error.data.title;
            })
           }])*@
    </script>
}